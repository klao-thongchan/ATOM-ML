name: ATOM -> Linting and tests

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development

jobs:
  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Check imports
        uses: jamescurtin/isort-action@master
        with:
          sortPaths: atom tests

  flake8:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install flake8 flake8-pyproject
      - name: Apply linting
        run: flake8 --show-source --statistics atom tests

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Code quality analysis
        uses: github/codeql-action/init@v2
        with:
            languages: python

  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }} environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pytest pytest-cov
          pip install -e .
      - name: Run tests w/ coverage
        run: pytest --cov=atom --cov-report=xml tests/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10' }}
        with:
          files: ./coverage.xml

  examples-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          pip install -U pytest pytest-xdist nbmake tensorflow scikeras
          pip install -e .
      - name: Run example notebooks
        run: pytest --nbmake -n=auto --ignore=./examples/webapp/ --ignore=./examples/accelerating_cuml.ipynb ./examples/
