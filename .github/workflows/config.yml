name: Linting and tests

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development

jobs:
  # Run jobs from pre-commit to ensure version equality

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -U pip pre-commit
      - name: Apply isort
        run: pre-commit run isort --all-files

  ruff:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -U pip pre-commit
      - name: Apply linting
        run: pre-commit run ruff --all-files

  mypy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -U pip pre-commit
      - name: Check type hints
        run: pre-commit run mypy --all-files

  code-quality-codeql:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Code quality analysis with CodeQL
        uses: github/codeql-action/init@v2
        with:
            languages: python

  code-quality-qodana:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Code quality analysis with Qodana
        uses: JetBrains/qodana-action@main
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_CLOUD }}

  unit-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.11"]
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }} environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools
          pip install -U pytest pytest-mock pytest-cov pytest-xdist
          pip install -e .[full]
      - name: Run tests w/ coverage
        run: pytest -n=auto --cov=atom --cov-report=xml tests/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10' }}
        with:
          files: ./coverage.xml

  examples-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install -U pip setuptools
          pip install -U pytest pytest-xdist nbmake scikeras tensorflow
          pip install -e .[full]
      - name: Run example notebooks
        run: |
          pytest \
          -n=auto \
          --nbmake \
          --nbmake-timeout=600 \
          --ignore=./examples/webapp/ \
          --ignore=./examples/accelerating_cuml.ipynb \
          --ignore=./examples/ray_backend.ipynb \
          ./examples/
